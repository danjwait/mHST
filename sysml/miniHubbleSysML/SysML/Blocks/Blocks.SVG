<?xml version="1.0" encoding="UTF-8"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" stroke-dasharray="none" shape-rendering="auto" font-family="'Dialog'" width="3368" text-rendering="auto" fill-opacity="1" contentScriptType="text/ecmascript" color-interpolation="auto" color-rendering="auto" preserveAspectRatio="xMidYMid meet" font-size="12" viewBox="0 0 3368 803" fill="black" stroke="black" image-rendering="auto" stroke-miterlimit="10" zoomAndPan="magnify" version="1.0" stroke-linecap="square" stroke-linejoin="miter" contentStyleType="text/css" font-style="normal" height="803" stroke-width="1" stroke-dashoffset="0" font-weight="normal" stroke-opacity="1">
    <!--Generated by the Batik Graphics2D SVG Generator-->
    <defs id="genericDefs"/>
    <g>
        <defs id="defs1">
            <clipPath clipPathUnits="userSpaceOnUse" id="clipPath1">
                <path d="M22 22 L64 22 L64 64 L22 64 L22 22 Z"/>
            </clipPath>
            <clipPath clipPathUnits="userSpaceOnUse" id="clipPath2">
                <path d="M121 197 L365 197 L365 219 L121 219 L121 197 Z"/>
            </clipPath>
            <clipPath clipPathUnits="userSpaceOnUse" id="clipPath3">
                <path d="M-1 -1 L3369 -1 L3369 804 L-1 804 L-1 -1 Z"/>
            </clipPath>
            <clipPath clipPathUnits="userSpaceOnUse" id="clipPath4">
                <path d="M1387 214 L1631 214 L1631 236 L1387 236 L1387 214 Z"/>
            </clipPath>
            <clipPath clipPathUnits="userSpaceOnUse" id="clipPath5">
                <path d="M1211 170 L1455 170 L1455 192 L1211 192 L1211 170 Z"/>
            </clipPath>
            <clipPath clipPathUnits="userSpaceOnUse" id="clipPath6">
                <path d="M1520 160 L1764 160 L1764 182 L1520 182 L1520 160 Z"/>
            </clipPath>
            <clipPath clipPathUnits="userSpaceOnUse" id="clipPath7">
                <path d="M1117 143 L1361 143 L1361 165 L1117 165 L1117 143 Z"/>
            </clipPath>
            <clipPath clipPathUnits="userSpaceOnUse" id="clipPath8">
                <path d="M1127 467 L1371 467 L1371 489 L1127 489 L1127 467 Z"/>
            </clipPath>
            <clipPath clipPathUnits="userSpaceOnUse" id="clipPath9">
                <path d="M1973 206 L2217 206 L2217 228 L1973 228 L1973 206 Z"/>
            </clipPath>
            <clipPath clipPathUnits="userSpaceOnUse" id="clipPath10">
                <path d="M2119 197 L2363 197 L2363 219 L2119 219 L2119 197 Z"/>
            </clipPath>
            <clipPath clipPathUnits="userSpaceOnUse" id="clipPath11">
                <path d="M28 142 L272 142 L272 164 L28 164 L28 142 Z"/>
            </clipPath>
            <clipPath clipPathUnits="userSpaceOnUse" id="clipPath12">
                <path d="M291 142 L535 142 L535 164 L291 164 L291 142 Z"/>
            </clipPath>
            <clipPath clipPathUnits="userSpaceOnUse" id="clipPath13">
                <path d="M468 142 L712 142 L712 164 L468 164 L468 142 Z"/>
            </clipPath>
            <clipPath clipPathUnits="userSpaceOnUse" id="clipPath14">
                <path d="M647 141 L891 141 L891 163 L647 163 L647 141 Z"/>
            </clipPath>
            <clipPath clipPathUnits="userSpaceOnUse" id="clipPath15">
                <path d="M870 142 L1114 142 L1114 164 L870 164 L870 142 Z"/>
            </clipPath>
            <clipPath clipPathUnits="userSpaceOnUse" id="clipPath16">
                <path d="M1554 144 L1798 144 L1798 166 L1554 166 L1554 144 Z"/>
            </clipPath>
            <clipPath clipPathUnits="userSpaceOnUse" id="clipPath17">
                <path d="M2313 141 L2557 141 L2557 163 L2313 163 L2313 141 Z"/>
            </clipPath>
            <clipPath clipPathUnits="userSpaceOnUse" id="clipPath18">
                <path d="M1126 681 L1370 681 L1370 703 L1126 703 L1126 681 Z"/>
            </clipPath>
            <clipPath clipPathUnits="userSpaceOnUse" id="clipPath19">
                <path d="M2510 141 L2754 141 L2754 163 L2510 163 L2510 141 Z"/>
            </clipPath>
            <clipPath clipPathUnits="userSpaceOnUse" id="clipPath20">
                <path d="M2707 141 L2951 141 L2951 163 L2707 163 L2707 141 Z"/>
            </clipPath>
            <clipPath clipPathUnits="userSpaceOnUse" id="clipPath21">
                <path d="M2908 142 L3152 142 L3152 164 L2908 164 L2908 142 Z"/>
            </clipPath>
            <clipPath clipPathUnits="userSpaceOnUse" id="clipPath22">
                <path d="M3102 141 L3346 141 L3346 163 L3102 163 L3102 141 Z"/>
            </clipPath>
            <clipPath clipPathUnits="userSpaceOnUse" id="clipPath23">
                <path d="M2060 412 L2304 412 L2304 434 L2060 434 L2060 412 Z"/>
            </clipPath>
        </defs>
        <g fill="rgb(255,203,203)" font-family="'Segoe UI'" stroke-linejoin="round" stroke="rgb(255,203,203)" stroke-width="0" stroke-miterlimit="0">
            <rect width="40" x="218" height="40" y="53" stroke="none"/>
        </g>
        <g stroke-linecap="butt" font-family="'Segoe UI'">
            <rect fill="none" width="39" x="218" height="39" y="53"/>
            <text xml:space="preserve" x="117" y="75" stroke="none">Invalid view - remove from diagram.</text>
            <rect x="388" y="53" fill="rgb(255,203,203)" width="40" height="40" stroke="none"/>
            <rect x="388" y="53" fill="none" width="39" height="39" stroke-width="0.1"/>
            <text xml:space="preserve" x="287" stroke-width="0.1" y="75" stroke="none">Invalid view - remove from diagram.</text>
            <rect x="570" y="53" fill="rgb(255,203,203)" width="40" height="40" stroke="none" stroke-width="0.1"/>
            <rect x="570" y="53" fill="none" width="39" height="39" stroke-width="0.1"/>
            <text xml:space="preserve" x="469" stroke-width="0.1" y="75" stroke="none">Invalid view - remove from diagram.</text>
            <rect x="1216" y="53" fill="rgb(255,203,203)" width="40" height="40" stroke="none" stroke-width="0.1"/>
            <rect x="1216" y="53" fill="none" width="39" height="39" stroke-width="0.1"/>
            <text xml:space="preserve" x="1115" stroke-width="0.1" y="75" stroke="none">Invalid view - remove from diagram.</text>
            <rect x="730" y="53" fill="rgb(255,203,203)" width="40" height="40" stroke="none" stroke-width="0.1"/>
            <rect x="730" y="53" fill="none" width="39" height="39" stroke-width="0.1"/>
            <text xml:space="preserve" x="629" stroke-width="0.1" y="75" stroke="none">Invalid view - remove from diagram.</text>
            <rect x="966" y="53" fill="rgb(255,203,203)" width="40" height="40" stroke="none" stroke-width="0.1"/>
            <rect x="966" y="53" fill="none" width="39" height="39" stroke-width="0.1"/>
            <text xml:space="preserve" x="865" stroke-width="0.1" y="75" stroke="none">Invalid view - remove from diagram.</text>
        </g>
        <g stroke-linecap="butt" fill="rgb(255,203,203)" font-family="'Segoe UI'" font-style="italic" stroke="rgb(255,203,203)" stroke-width="0.1">
            <rect width="40" x="1450" height="40" y="53" stroke="none"/>
            <rect x="1450" y="53" fill="none" width="39" height="39" stroke="black"/>
            <text fill="black" xml:space="preserve" x="1353" y="75" stroke="none">Invalid view - remove from diagram.</text>
            <rect width="40" x="2408" height="40" y="53" stroke="none"/>
            <rect x="2408" y="53" fill="none" width="39" height="39" stroke="black"/>
            <text x="2307" y="75" fill="black" font-style="normal" stroke="none" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect width="40" x="1219" height="40" y="593" stroke="none"/>
            <rect x="1219" y="593" fill="none" width="39" height="39" stroke="black"/>
            <text fill="black" xml:space="preserve" x="1122" y="615" stroke="none">Invalid view - remove from diagram.</text>
            <rect width="40" x="2605" height="40" y="53" stroke="none"/>
            <rect x="2605" y="53" fill="none" width="39" height="39" stroke="black"/>
            <text x="2504" y="75" fill="black" font-style="normal" stroke="none" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect width="40" x="2799" height="40" y="53" stroke="none"/>
            <rect x="2799" y="53" fill="none" width="39" height="39" stroke="black"/>
            <text x="2698" y="75" fill="black" font-style="normal" stroke="none" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect width="40" x="3003" height="40" y="53" stroke="none"/>
            <rect x="3003" y="53" fill="none" width="39" height="39" stroke="black"/>
            <text x="2902" y="75" fill="black" font-style="normal" stroke="none" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect width="40" x="3194" height="40" y="53" stroke="none"/>
            <rect x="3194" y="53" fill="none" width="39" height="39" stroke="black"/>
            <text x="3093" y="75" fill="black" font-style="normal" stroke="none" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect width="40" x="2162" height="40" y="323" stroke="none"/>
            <rect x="2162" y="323" fill="none" width="39" height="39" stroke="black"/>
            <text x="2061" y="345" fill="black" font-style="normal" stroke="none" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect width="40" x="223" height="40" y="323" stroke="none"/>
            <rect x="223" y="323" fill="none" width="39" height="39" stroke="black"/>
            <text fill="black" xml:space="preserve" x="126" y="345" stroke="none">Invalid view - remove from diagram.</text>
            <rect width="40" x="1602" height="40" y="323" stroke="none"/>
            <rect x="1602" y="323" fill="none" width="39" height="39" stroke="black"/>
            <text fill="black" xml:space="preserve" x="1505" y="345" stroke="none">Invalid view - remove from diagram.</text>
            <rect width="40" x="1239" height="40" y="323" stroke="none"/>
            <rect x="1239" y="323" fill="none" width="39" height="39" stroke="black"/>
            <text x="1138" y="345" fill="black" font-style="normal" stroke="none" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect width="40" x="2142" height="40" y="53" stroke="none"/>
            <rect x="2142" y="53" fill="none" width="39" height="39" stroke="black"/>
            <text x="2041" y="75" fill="black" font-style="normal" stroke="none" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect width="40" x="53" height="40" y="213" stroke="none"/>
            <rect x="53" y="213" fill="none" width="39" height="39" stroke="black"/>
            <text x="-48" y="235" fill="black" font-style="normal" stroke="none" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect width="40" x="399" height="40" y="213" stroke="none"/>
            <rect x="399" y="213" fill="none" width="39" height="39" stroke="black"/>
            <text x="298" y="235" fill="black" font-style="normal" stroke="none" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect width="40" x="570" height="40" y="213" stroke="none"/>
            <rect x="570" y="213" fill="none" width="39" height="39" stroke="black"/>
            <text x="469" y="235" fill="black" font-style="normal" stroke="none" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect width="40" x="768" height="40" y="213" stroke="none"/>
            <rect x="768" y="213" fill="none" width="39" height="39" stroke="black"/>
            <text x="667" y="235" fill="black" font-style="normal" stroke="none" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect width="40" x="979" height="40" y="213" stroke="none"/>
            <rect x="979" y="213" fill="none" width="39" height="39" stroke="black"/>
            <text x="878" y="235" fill="black" font-style="normal" stroke="none" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect width="40" x="1863" height="40" y="213" stroke="none"/>
            <rect x="1863" y="213" fill="none" width="39" height="39" stroke="black"/>
            <text fill="black" xml:space="preserve" x="1766" y="235" stroke="none">Invalid view - remove from diagram.</text>
            <rect width="40" x="2424" height="40" y="213" stroke="none"/>
            <rect x="2424" y="213" fill="none" width="39" height="39" stroke="black"/>
            <text x="2323" y="235" fill="black" font-style="normal" stroke="none" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect width="40" x="1239" height="40" y="753" stroke="none"/>
            <rect x="1239" y="753" fill="none" width="39" height="39" stroke="black"/>
            <text fill="black" xml:space="preserve" x="1142" y="775" stroke="none">Invalid view - remove from diagram.</text>
            <rect width="40" x="2620" height="40" y="213" stroke="none"/>
            <rect x="2620" y="213" fill="none" width="39" height="39" stroke="black"/>
            <text x="2519" y="235" fill="black" font-style="normal" stroke="none" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect width="40" x="2820" height="40" y="213" stroke="none"/>
            <rect x="2820" y="213" fill="none" width="39" height="39" stroke="black"/>
            <text x="2719" y="235" fill="black" font-style="normal" stroke="none" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect width="40" x="3018" height="40" y="213" stroke="none"/>
            <rect x="3018" y="213" fill="none" width="39" height="39" stroke="black"/>
            <text x="2917" y="235" fill="black" font-style="normal" stroke="none" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect width="40" x="3215" height="40" y="213" stroke="none"/>
            <rect x="3215" y="213" fill="none" width="39" height="39" stroke="black"/>
            <text fill="black" xml:space="preserve" x="3118" y="235" stroke="none">Invalid view - remove from diagram.</text>
            <rect width="40" x="2162" height="40" y="483" stroke="none"/>
            <rect x="2162" y="483" fill="none" width="39" height="39" stroke="black"/>
            <text x="2061" y="505" fill="black" font-style="normal" stroke="none" xml:space="preserve">Invalid view - remove from diagram.</text>
        </g>
        <g fill="red" stroke-width="1.1" font-family="'Segoe UI'" stroke-linecap="butt" stroke="red">
            <line y2="323" fill="none" x1="243" x2="243" y1="93"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none" stroke-width="0.1"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none" stroke-width="0.1"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none" stroke-width="0.1"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none" stroke-width="0.1"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none" stroke-width="0.1"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <text x="122" y="211" clip-path="url(#clipPath2)" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <line clip-path="url(#clipPath3)" fill="none" x1="1490" x2="1510" y1="89" y2="231"/>
            <line clip-path="url(#clipPath3)" fill="none" x1="1510" x2="1602" y1="231" y2="325"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none" stroke-width="0.1"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none" stroke-width="0.1"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none" stroke-width="0.1"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none" stroke-width="0.1"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none" stroke-width="0.1"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <text x="1388" y="228" clip-path="url(#clipPath4)" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <line clip-path="url(#clipPath3)" fill="none" x1="1476" x2="1335" y1="93" y2="170"/>
            <line clip-path="url(#clipPath3)" fill="none" x1="1335" x2="1323" y1="170" y2="244"/>
            <line clip-path="url(#clipPath3)" fill="none" x1="1323" x2="1246" y1="244" y2="323"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none" stroke-width="0.1"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none" stroke-width="0.1"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none" stroke-width="0.1"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none" stroke-width="0.1"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none" stroke-width="0.1"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <text x="1212" y="184" clip-path="url(#clipPath5)" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <line clip-path="url(#clipPath3)" fill="none" x1="1490" x2="1646" y1="90" y2="173"/>
            <line clip-path="url(#clipPath3)" fill="none" x1="1646" x2="1660" y1="173" y2="244"/>
            <line clip-path="url(#clipPath3)" fill="none" x1="1660" x2="1605" y1="244" y2="323"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none" stroke-width="0.1"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none" stroke-width="0.1"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none" stroke-width="0.1"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none" stroke-width="0.1"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none" stroke-width="0.1"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <text x="1521" y="174" clip-path="url(#clipPath6)" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <line clip-path="url(#clipPath3)" fill="none" x1="1459" x2="1190" y1="93" y2="168"/>
            <line clip-path="url(#clipPath3)" fill="none" x1="1190" x2="1178" y1="168" y2="241"/>
            <line clip-path="url(#clipPath3)" fill="none" x1="1178" x2="1239" y1="241" y2="327"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none" stroke-width="0.1"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none" stroke-width="0.1"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none" stroke-width="0.1"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none" stroke-width="0.1"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none" stroke-width="0.1"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <text x="1118" y="157" clip-path="url(#clipPath7)" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <line clip-path="url(#clipPath3)" fill="none" x1="1259" x2="1238" y1="363" y2="593"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none" stroke-width="0.1"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none" stroke-width="0.1"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none" stroke-width="0.1"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none" stroke-width="0.1"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none" stroke-width="0.1"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <text x="1128" y="481" clip-path="url(#clipPath8)" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <line clip-path="url(#clipPath3)" fill="none" x1="2156" x2="2094" y1="93" y2="206"/>
            <line clip-path="url(#clipPath3)" fill="none" x1="2094" x2="2099" y1="206" y2="258"/>
            <line clip-path="url(#clipPath3)" fill="none" x1="2099" x2="2175" y1="258" y2="323"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none" stroke-width="0.1"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none" stroke-width="0.1"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none" stroke-width="0.1"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none" stroke-width="0.1"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none" stroke-width="0.1"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <text x="1974" y="220" clip-path="url(#clipPath9)" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <line clip-path="url(#clipPath3)" fill="none" x1="2166" x2="2241" y1="93" y2="206"/>
            <line clip-path="url(#clipPath3)" fill="none" x1="2241" x2="2251" y1="206" y2="258"/>
            <line clip-path="url(#clipPath3)" fill="none" x1="2251" x2="2188" y1="258" y2="323"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none" stroke-width="0.1"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none" stroke-width="0.1"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none" stroke-width="0.1"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none" stroke-width="0.1"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="rgb(255,203,203)" width="40" height="40" stroke="none" stroke-width="0.1"/>
            <rect x="23" y="23" clip-path="url(#clipPath1)" fill="none" width="39" height="39" stroke="black" stroke-width="0.1"/>
            <text x="-78" y="45" clip-path="url(#clipPath1)" fill="black" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <text x="2120" y="211" clip-path="url(#clipPath10)" stroke="none" stroke-width="0.1" xml:space="preserve">Invalid view - remove from diagram.</text>
            <line clip-path="url(#clipPath3)" fill="none" x1="227" x2="73" y1="93" y2="213"/>
            <text xml:space="preserve" x="29" y="156" clip-path="url(#clipPath11)" stroke="none">Invalid view - remove from diagram.</text>
            <line clip-path="url(#clipPath3)" fill="none" x1="408" x2="419" y1="93" y2="213"/>
            <text xml:space="preserve" x="292" y="156" clip-path="url(#clipPath12)" stroke="none">Invalid view - remove from diagram.</text>
            <line clip-path="url(#clipPath3)" fill="none" x1="590" x2="590" y1="93" y2="213"/>
            <text xml:space="preserve" x="469" y="156" clip-path="url(#clipPath13)" stroke="none">Invalid view - remove from diagram.</text>
            <line clip-path="url(#clipPath3)" fill="none" x1="750" x2="788" y1="93" y2="213"/>
            <text xml:space="preserve" x="648" y="155" clip-path="url(#clipPath14)" stroke="none">Invalid view - remove from diagram.</text>
            <line clip-path="url(#clipPath3)" fill="none" x1="985" x2="999" y1="93" y2="213"/>
            <text xml:space="preserve" x="871" y="156" clip-path="url(#clipPath15)" stroke="none">Invalid view - remove from diagram.</text>
            <line clip-path="url(#clipPath3)" fill="none" x1="1490" x2="1863" y1="90" y2="221"/>
            <text xml:space="preserve" x="1555" y="158" clip-path="url(#clipPath16)" stroke="none">Invalid view - remove from diagram.</text>
            <line clip-path="url(#clipPath3)" fill="none" x1="2427" x2="2444" y1="93" y2="213"/>
            <text xml:space="preserve" x="2314" y="155" clip-path="url(#clipPath17)" stroke="none">Invalid view - remove from diagram.</text>
            <line clip-path="url(#clipPath3)" fill="none" x1="1238" x2="1259" y1="633" y2="753"/>
            <text xml:space="preserve" x="1127" y="695" clip-path="url(#clipPath18)" stroke="none">Invalid view - remove from diagram.</text>
            <line clip-path="url(#clipPath3)" fill="none" x1="2624" x2="2640" y1="93" y2="213"/>
            <text xml:space="preserve" x="2511" y="155" clip-path="url(#clipPath19)" stroke="none">Invalid view - remove from diagram.</text>
            <line clip-path="url(#clipPath3)" fill="none" x1="2819" x2="2840" y1="93" y2="213"/>
            <text xml:space="preserve" x="2708" y="155" clip-path="url(#clipPath20)" stroke="none">Invalid view - remove from diagram.</text>
            <line clip-path="url(#clipPath3)" fill="none" x1="3023" x2="3038" y1="93" y2="213"/>
            <text xml:space="preserve" x="2909" y="156" clip-path="url(#clipPath21)" stroke="none">Invalid view - remove from diagram.</text>
            <line clip-path="url(#clipPath3)" fill="none" x1="3214" x2="3235" y1="93" y2="213"/>
            <text xml:space="preserve" x="3103" y="155" clip-path="url(#clipPath22)" stroke="none">Invalid view - remove from diagram.</text>
            <line clip-path="url(#clipPath3)" fill="none" x1="2182" x2="2182" y1="363" y2="483"/>
            <text xml:space="preserve" x="2061" y="426" clip-path="url(#clipPath23)" stroke="none">Invalid view - remove from diagram.</text>
        </g>
    </g>
    <rect x="218" y="53" fill-opacity="0" width="40" title="&#10;            The AdjunctProperty stereotype can be applied to properties to constrain their values to the values of connectors typed by association blocks, call actions, object nodes, variables, or parameters, interaction uses, and submachine states.  The values of connectors typed by association blocks are the instances of the association block typing a connector in the block having the stereotyped property.  The values of call actions are the executions of behaviors invoked by the behavior having the call action and the stereotyped property (see Subclause 11.3.1.1.1 for more about this use of the stereotype).  The values of object nodes are the values of tokens in the object nodes of the behavior having the stereotyped property (see Subclause 11.3.1.4.1 for more about this use of the stereotype).  The values of variables are those assigned by executions of activities that have the stereotyped property.  The values of parameters are those assigned by executions of behaviors that have the stereotyped property.  The keyword «adjunct» before a property name indicates the property is stereotyped by AdjunctProperty.&#10;          " id="AdjunctProperty" height="40" stroke-opacity="0">
        <title>
            The AdjunctProperty stereotype can be applied to properties to constrain their values to the values of connectors typed by association blocks, call actions, object nodes, variables, or parameters, interaction uses, and submachine states.  The values of connectors typed by association blocks are the instances of the association block typing a connector in the block having the stereotyped property.  The values of call actions are the executions of behaviors invoked by the behavior having the call action and the stereotyped property (see Subclause 11.3.1.1.1 for more about this use of the stereotype).  The values of object nodes are the values of tokens in the object nodes of the behavior having the stereotyped property (see Subclause 11.3.1.4.1 for more about this use of the stereotype).  The values of variables are those assigned by executions of activities that have the stereotyped property.  The values of parameters are those assigned by executions of behaviors that have the stereotyped property.  The keyword «adjunct» before a property name indicates the property is stereotyped by AdjunctProperty.
          </title>
    </rect>
    <rect x="388" y="53" fill-opacity="0" width="40" title="&#10;            A Binding Connector is a connector which specifies that the properties at both ends of the connector have equal values. If the properties at the ends of a binding connector are typed by a DataType or ValueType, the connector specifies that the instances of the properties must hold equal values, recursively through any nested properties within the connected properties. If the properties at the ends of a binding connector are typed by a Block, the connector specifies that the instances of the properties must refer to the same block instance. As with any connector owned by a SysML Block, the ends of a binding connector may be nested within a multi-level path of properties accessible from the owning block. The NestedConnectorEnd stereotype is used to represent such nested ends just as for nested ends of other SysML connectors.&#10;          " id="BindingConnector" height="40" stroke-opacity="0">
        <title>
            A Binding Connector is a connector which specifies that the properties at both ends of the connector have equal values. If the properties at the ends of a binding connector are typed by a DataType or ValueType, the connector specifies that the instances of the properties must hold equal values, recursively through any nested properties within the connected properties. If the properties at the ends of a binding connector are typed by a Block, the connector specifies that the instances of the properties must refer to the same block instance. As with any connector owned by a SysML Block, the ends of a binding connector may be nested within a multi-level path of properties accessible from the owning block. The NestedConnectorEnd stereotype is used to represent such nested ends just as for nested ends of other SysML connectors.
          </title>
    </rect>
    <rect x="570" y="53" fill-opacity="0" width="40" title="&#10;            A Block is a modular unit that describes the structure of a system or element. It may include both structural and behavioral features, such as properties and operations, that represent the state of the system and behavior that the system may exhibit. Some of these properties may hold parts of a system, which can also be described by blocks. A block may include a structure of connectors between its properties to indicate how its parts or other properties relate to one another. SysML blocks provide a general-purpose capability to describe the architecture of a system. They provide the ability to represent a system hierarchy, in which a system at one level is composed of systems at a more basic level. They can describe not only the connectivity relationships between the systems at any level, but also quantitative values or other information about a system. SysML does not restrict the kind of system or system element that may be described by a block. Any reusable form of description that may be applied to a system or a set of system characteristics may be described by a block. Such reusable descriptions, for example, may be applied to purely conceptual aspects of a system design, such as relationships that hold between parts or properties of a system. Connectors owned by SysML blocks may be used to define relationships between parts or other properties of the same containing block. The type of a connector or its connected ends may specify the semantic interpretation of a specific connector.&#10;          " id="Block" height="40" stroke-opacity="0">
        <title>
            A Block is a modular unit that describes the structure of a system or element. It may include both structural and behavioral features, such as properties and operations, that represent the state of the system and behavior that the system may exhibit. Some of these properties may hold parts of a system, which can also be described by blocks. A block may include a structure of connectors between its properties to indicate how its parts or other properties relate to one another. SysML blocks provide a general-purpose capability to describe the architecture of a system. They provide the ability to represent a system hierarchy, in which a system at one level is composed of systems at a more basic level. They can describe not only the connectivity relationships between the systems at any level, but also quantitative values or other information about a system. SysML does not restrict the kind of system or system element that may be described by a block. Any reusable form of description that may be applied to a system or a set of system characteristics may be described by a block. Such reusable descriptions, for example, may be applied to purely conceptual aspects of a system design, such as relationships that hold between parts or properties of a system. Connectors owned by SysML blocks may be used to define relationships between parts or other properties of the same containing block. The type of a connector or its connected ends may specify the semantic interpretation of a specific connector.
          </title>
    </rect>
    <rect x="1216" y="53" fill-opacity="0" width="40" id="BoundReference" height="40" stroke-opacity="0"/>
    <rect x="730" y="53" fill-opacity="0" width="40" title="&#10;            The ClassifierBehaviorProperty stereotype can be applied to properties to constrain their values to be the executions of classifier behaviors.  The value of properties with ClassifierBehaviorProperty  applied are the executions of classifier behaviors invoked by instantiation of the block that owns the stereotyped property or one of its specializations.&#10;          " id="ClassifierBehaviorProperty" height="40" stroke-opacity="0">
        <title>
            The ClassifierBehaviorProperty stereotype can be applied to properties to constrain their values to be the executions of classifier behaviors.  The value of properties with ClassifierBehaviorProperty  applied are the executions of classifier behaviors invoked by instantiation of the block that owns the stereotyped property or one of its specializations.
          </title>
    </rect>
    <rect x="966" y="53" fill-opacity="0" width="40" title="&#10;            Connectors can be typed by association classes that are stereotyped by Block (association blocks). These connectors specify instances (links) of the association block that exist due to instantiation of the block owning or inheriting the connector. The value of a connector property on an instance of a block will be exactly those link objects that are instances of the association block typing the connector referred to by the connector property.&#10;          " id="ConnectorProperty" height="40" stroke-opacity="0">
        <title>
            Connectors can be typed by association classes that are stereotyped by Block (association blocks). These connectors specify instances (links) of the association block that exist due to instantiation of the block owning or inheriting the connector. The value of a connector property on an instance of a block will be exactly those link objects that are instances of the association block typing the connector referred to by the connector property.
          </title>
    </rect>
    <rect x="1450" y="53" fill-opacity="0" width="40" id="DirectedRelationshipPropertyPath" height="40" stroke-opacity="0"/>
    <rect x="2408" y="53" fill-opacity="0" width="40" title="&#10;            DistributedProperty is a stereotype of Property used to apply a probability distribution to the values of the property. Specific distributions should be defined as subclasses of the DistributedProperty stereotype with the operands of the distributions represented by properties of those stereotype subclasses.&#10;          " id="DistributedProperty" height="40" stroke-opacity="0">
        <title>
            DistributedProperty is a stereotype of Property used to apply a probability distribution to the values of the property. Specific distributions should be defined as subclasses of the DistributedProperty stereotype with the operands of the distributions represented by properties of those stereotype subclasses.
          </title>
    </rect>
    <rect x="1219" y="593" fill-opacity="0" width="40" id="ElementPropertyPath" height="40" stroke-opacity="0"/>
    <rect x="2605" y="53" fill-opacity="0" width="40" id="EndPathMultiplicity" height="40" stroke-opacity="0"/>
    <rect x="2799" y="53" fill-opacity="0" width="40" title="The NestedConnectorEnd stereotype of UML ConnectorEnd extends a UML ConnectorEnd so that the connected property may be identified by a multi-level path of accessible properties from the block that owns the connector." id="NestedConnectorEnd" height="40" stroke-opacity="0">
        <title>The NestedConnectorEnd stereotype of UML ConnectorEnd extends a UML ConnectorEnd so that the connected property may be identified by a multi-level path of accessible properties from the block that owns the connector.</title>
    </rect>
    <rect x="3003" y="53" fill-opacity="0" width="40" title="&#10;            The Block stereotype extends Class, so it can be applied to any specialization of Class, including Association Classes. These are informally called “association blocks.” An association block can own properties and connectors, like any other block. Each instance of an association block can link together instances of the end classifiers of the association. To refer to linked objects and values of an instance of an association block, it is necessary for the modeler to specify which (participant) properties of the association block identify the instances being linked at which end of the association. The value of a participant property on an instance (link) of the association block is the value or object at the end of the link corresponding to this end of the association.&#10;          " id="ParticipantProperty" height="40" stroke-opacity="0">
        <title>
            The Block stereotype extends Class, so it can be applied to any specialization of Class, including Association Classes. These are informally called “association blocks.” An association block can own properties and connectors, like any other block. Each instance of an association block can link together instances of the end classifiers of the association. To refer to linked objects and values of an instance of an association block, it is necessary for the modeler to specify which (participant) properties of the association block identify the instances being linked at which end of the association. The value of a participant property on an instance (link) of the association block is the value or object at the end of the link corresponding to this end of the association.
          </title>
    </rect>
    <rect x="3194" y="53" fill-opacity="0" width="40" title="The PropertySpecificType stereotype should automatically be applied to the classifier which types a property with a propertyspecific type. This classifier can contain definitions of new or redefined features which extend the original classifier referenced by the property-specific type." id="PropertySpecificType" height="40" stroke-opacity="0">
        <title>The PropertySpecificType stereotype should automatically be applied to the classifier which types a property with a propertyspecific type. This classifier can contain definitions of new or redefined features which extend the original classifier referenced by the property-specific type.</title>
    </rect>
    <rect x="2162" y="323" fill-opacity="0" width="40" title="&#10;            A ValueType defines types of values that may be used to express information about a system, but cannot be identified as the target of any reference. Since a value cannot be identified except by means of the value itself, each such value within a model is independent of any other, unless other forms of constraints are imposed. Value types may be used to type properties, operation parameters, or potentially other elements within SysML. SysML defines ValueType as a stereotype of UML DataType to establish a more neutral term for system values that may never be given a concrete data representation.&#10;          " id="ValueType" height="40" stroke-opacity="0">
        <title>
            A ValueType defines types of values that may be used to express information about a system, but cannot be identified as the target of any reference. Since a value cannot be identified except by means of the value itself, each such value within a model is independent of any other, unless other forms of constraints are imposed. Value types may be used to type properties, operation parameters, or potentially other elements within SysML. SysML defines ValueType as a stereotype of UML DataType to establish a more neutral term for system values that may never be given a concrete data representation.
          </title>
    </rect>
    <rect x="223" y="323" fill-opacity="0" width="40" title="An Element is a constituent of a model. As such, it has the capability of owning other Elements." id="Element" height="40" stroke-opacity="0">
        <title>An Element is a constituent of a model. As such, it has the capability of owning other Elements.</title>
    </rect>
    <rect x="1602" y="323" fill-opacity="0" width="40" title="A Classifier represents a classification of instances according to their Features." id="Classifier" height="40" stroke-opacity="0">
        <title>A Classifier represents a classification of instances according to their Features.</title>
    </rect>
    <rect x="1239" y="323" fill-opacity="0" width="40" title="A Property is a StructuralFeature. A Property related by ownedAttribute to a Classifier (other than an association) represents an attribute and might also represent an association end. It relates an instance of the Classifier to a value or set of values of the type of the attribute. A Property related by memberEnd to an Association represents an end of the Association. The type of the Property is the type of the end of the Association. A Property has the capability of being a DeploymentTarget in a Deployment relationship. This enables modeling the deployment to hierarchical nodes that have Properties functioning as internal parts.  Property specializes ParameterableElement to specify that a Property can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template." id="Property" height="40" stroke-opacity="0">
        <title>A Property is a StructuralFeature. A Property related by ownedAttribute to a Classifier (other than an association) represents an attribute and might also represent an association end. It relates an instance of the Classifier to a value or set of values of the type of the attribute. A Property related by memberEnd to an Association represents an end of the Association. The type of the Property is the type of the end of the Association. A Property has the capability of being a DeploymentTarget in a Deployment relationship. This enables modeling the deployment to hierarchical nodes that have Properties functioning as internal parts.  Property specializes ParameterableElement to specify that a Property can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template.</title>
    </rect>
    <rect x="2142" y="53" fill-opacity="0" width="40" title="An InstanceSpecification is a model element that represents an instance in a modeled system. An InstanceSpecification can act as a DeploymentTarget in a Deployment relationship, in the case that it represents an instance of a Node. It can also act as a DeployedArtifact, if it represents an instance of an Artifact." id="InstanceSpecification" height="40" stroke-opacity="0">
        <title>An InstanceSpecification is a model element that represents an instance in a modeled system. An InstanceSpecification can act as a DeploymentTarget in a Deployment relationship, in the case that it represents an instance of a Node. It can also act as a DeployedArtifact, if it represents an instance of an Artifact.</title>
    </rect>
    <rect x="53" y="213" fill-opacity="0" width="40" title="A Property is a StructuralFeature. A Property related by ownedAttribute to a Classifier (other than an association) represents an attribute and might also represent an association end. It relates an instance of the Classifier to a value or set of values of the type of the attribute. A Property related by memberEnd to an Association represents an end of the Association. The type of the Property is the type of the end of the Association. A Property has the capability of being a DeploymentTarget in a Deployment relationship. This enables modeling the deployment to hierarchical nodes that have Properties functioning as internal parts.  Property specializes ParameterableElement to specify that a Property can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template." id="Property" height="40" stroke-opacity="0">
        <title>A Property is a StructuralFeature. A Property related by ownedAttribute to a Classifier (other than an association) represents an attribute and might also represent an association end. It relates an instance of the Classifier to a value or set of values of the type of the attribute. A Property related by memberEnd to an Association represents an end of the Association. The type of the Property is the type of the end of the Association. A Property has the capability of being a DeploymentTarget in a Deployment relationship. This enables modeling the deployment to hierarchical nodes that have Properties functioning as internal parts.  Property specializes ParameterableElement to specify that a Property can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template.</title>
    </rect>
    <rect x="399" y="213" fill-opacity="0" width="40" title="A Connector specifies links that enables communication between two or more instances. In contrast to Associations, which specify links between any instance of the associated Classifiers, Connectors specify links between instances playing the connected parts only." id="Connector" height="40" stroke-opacity="0">
        <title>A Connector specifies links that enables communication between two or more instances. In contrast to Associations, which specify links between any instance of the associated Classifiers, Connectors specify links between instances playing the connected parts only.</title>
    </rect>
    <rect x="570" y="213" fill-opacity="0" width="40" title="A Class classifies a set of objects and specifies the features that characterize the structure and behavior of those objects.  A Class may have an internal structure and Ports." id="Class" height="40" stroke-opacity="0">
        <title>A Class classifies a set of objects and specifies the features that characterize the structure and behavior of those objects.  A Class may have an internal structure and Ports.</title>
    </rect>
    <rect x="768" y="213" fill-opacity="0" width="40" title="A Property is a StructuralFeature. A Property related by ownedAttribute to a Classifier (other than an association) represents an attribute and might also represent an association end. It relates an instance of the Classifier to a value or set of values of the type of the attribute. A Property related by memberEnd to an Association represents an end of the Association. The type of the Property is the type of the end of the Association. A Property has the capability of being a DeploymentTarget in a Deployment relationship. This enables modeling the deployment to hierarchical nodes that have Properties functioning as internal parts.  Property specializes ParameterableElement to specify that a Property can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template." id="Property" height="40" stroke-opacity="0">
        <title>A Property is a StructuralFeature. A Property related by ownedAttribute to a Classifier (other than an association) represents an attribute and might also represent an association end. It relates an instance of the Classifier to a value or set of values of the type of the attribute. A Property related by memberEnd to an Association represents an end of the Association. The type of the Property is the type of the end of the Association. A Property has the capability of being a DeploymentTarget in a Deployment relationship. This enables modeling the deployment to hierarchical nodes that have Properties functioning as internal parts.  Property specializes ParameterableElement to specify that a Property can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template.</title>
    </rect>
    <rect x="979" y="213" fill-opacity="0" width="40" title="A Property is a StructuralFeature. A Property related by ownedAttribute to a Classifier (other than an association) represents an attribute and might also represent an association end. It relates an instance of the Classifier to a value or set of values of the type of the attribute. A Property related by memberEnd to an Association represents an end of the Association. The type of the Property is the type of the end of the Association. A Property has the capability of being a DeploymentTarget in a Deployment relationship. This enables modeling the deployment to hierarchical nodes that have Properties functioning as internal parts.  Property specializes ParameterableElement to specify that a Property can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template." id="Property" height="40" stroke-opacity="0">
        <title>A Property is a StructuralFeature. A Property related by ownedAttribute to a Classifier (other than an association) represents an attribute and might also represent an association end. It relates an instance of the Classifier to a value or set of values of the type of the attribute. A Property related by memberEnd to an Association represents an end of the Association. The type of the Property is the type of the end of the Association. A Property has the capability of being a DeploymentTarget in a Deployment relationship. This enables modeling the deployment to hierarchical nodes that have Properties functioning as internal parts.  Property specializes ParameterableElement to specify that a Property can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template.</title>
    </rect>
    <rect x="1863" y="213" fill-opacity="0" width="40" title="A DirectedRelationship represents a relationship between a collection of source model Elements and a collection of target model Elements." id="DirectedRelationship" height="40" stroke-opacity="0">
        <title>A DirectedRelationship represents a relationship between a collection of source model Elements and a collection of target model Elements.</title>
    </rect>
    <rect x="2424" y="213" fill-opacity="0" width="40" title="A Property is a StructuralFeature. A Property related by ownedAttribute to a Classifier (other than an association) represents an attribute and might also represent an association end. It relates an instance of the Classifier to a value or set of values of the type of the attribute. A Property related by memberEnd to an Association represents an end of the Association. The type of the Property is the type of the end of the Association. A Property has the capability of being a DeploymentTarget in a Deployment relationship. This enables modeling the deployment to hierarchical nodes that have Properties functioning as internal parts.  Property specializes ParameterableElement to specify that a Property can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template." id="Property" height="40" stroke-opacity="0">
        <title>A Property is a StructuralFeature. A Property related by ownedAttribute to a Classifier (other than an association) represents an attribute and might also represent an association end. It relates an instance of the Classifier to a value or set of values of the type of the attribute. A Property related by memberEnd to an Association represents an end of the Association. The type of the Property is the type of the end of the Association. A Property has the capability of being a DeploymentTarget in a Deployment relationship. This enables modeling the deployment to hierarchical nodes that have Properties functioning as internal parts.  Property specializes ParameterableElement to specify that a Property can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template.</title>
    </rect>
    <rect x="1239" y="753" fill-opacity="0" width="40" title="An Element is a constituent of a model. As such, it has the capability of owning other Elements." id="Element" height="40" stroke-opacity="0">
        <title>An Element is a constituent of a model. As such, it has the capability of owning other Elements.</title>
    </rect>
    <rect x="2620" y="213" fill-opacity="0" width="40" title="A Property is a StructuralFeature. A Property related by ownedAttribute to a Classifier (other than an association) represents an attribute and might also represent an association end. It relates an instance of the Classifier to a value or set of values of the type of the attribute. A Property related by memberEnd to an Association represents an end of the Association. The type of the Property is the type of the end of the Association. A Property has the capability of being a DeploymentTarget in a Deployment relationship. This enables modeling the deployment to hierarchical nodes that have Properties functioning as internal parts.  Property specializes ParameterableElement to specify that a Property can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template." id="Property" height="40" stroke-opacity="0">
        <title>A Property is a StructuralFeature. A Property related by ownedAttribute to a Classifier (other than an association) represents an attribute and might also represent an association end. It relates an instance of the Classifier to a value or set of values of the type of the attribute. A Property related by memberEnd to an Association represents an end of the Association. The type of the Property is the type of the end of the Association. A Property has the capability of being a DeploymentTarget in a Deployment relationship. This enables modeling the deployment to hierarchical nodes that have Properties functioning as internal parts.  Property specializes ParameterableElement to specify that a Property can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template.</title>
    </rect>
    <rect x="2820" y="213" fill-opacity="0" width="40" title="A ConnectorEnd is an endpoint of a Connector, which attaches the Connector to a ConnectableElement." id="ConnectorEnd" height="40" stroke-opacity="0">
        <title>A ConnectorEnd is an endpoint of a Connector, which attaches the Connector to a ConnectableElement.</title>
    </rect>
    <rect x="3018" y="213" fill-opacity="0" width="40" title="A Property is a StructuralFeature. A Property related by ownedAttribute to a Classifier (other than an association) represents an attribute and might also represent an association end. It relates an instance of the Classifier to a value or set of values of the type of the attribute. A Property related by memberEnd to an Association represents an end of the Association. The type of the Property is the type of the end of the Association. A Property has the capability of being a DeploymentTarget in a Deployment relationship. This enables modeling the deployment to hierarchical nodes that have Properties functioning as internal parts.  Property specializes ParameterableElement to specify that a Property can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template." id="Property" height="40" stroke-opacity="0">
        <title>A Property is a StructuralFeature. A Property related by ownedAttribute to a Classifier (other than an association) represents an attribute and might also represent an association end. It relates an instance of the Classifier to a value or set of values of the type of the attribute. A Property related by memberEnd to an Association represents an end of the Association. The type of the Property is the type of the end of the Association. A Property has the capability of being a DeploymentTarget in a Deployment relationship. This enables modeling the deployment to hierarchical nodes that have Properties functioning as internal parts.  Property specializes ParameterableElement to specify that a Property can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template.</title>
    </rect>
    <rect x="3215" y="213" fill-opacity="0" width="40" title="A Classifier represents a classification of instances according to their Features." id="Classifier" height="40" stroke-opacity="0">
        <title>A Classifier represents a classification of instances according to their Features.</title>
    </rect>
    <rect x="2162" y="483" fill-opacity="0" width="40" title="A DataType is a type whose instances are identified only by their value." id="DataType" height="40" stroke-opacity="0">
        <title>A DataType is a type whose instances are identified only by their value.</title>
    </rect>
</svg>
